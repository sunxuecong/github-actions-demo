import{_ as a,h as s,o as e,a5 as n}from"./chunks/framework.AZsVLHmQ.js";const i="/github-actions-demo/assets/nodemodules.m27j172C.png",g=JSON.parse('{"title":"如何优雅的修改node_modules中的依赖库","description":"","frontmatter":{},"headers":[],"relativePath":"workflow/node/nodemodules.md","filePath":"workflow/node/nodemodules.md","lastUpdated":1725013305000}'),l={name:"workflow/node/nodemodules.md"},p=n(`<h1 id="如何优雅的修改node-modules中的依赖库" tabindex="-1">如何优雅的修改node_modules中的依赖库 <a class="header-anchor" href="#如何优雅的修改node-modules中的依赖库" aria-label="Permalink to &quot;如何优雅的修改node_modules中的依赖库&quot;">​</a></h1><p>最近使用了一个开源项目，由于业务需要，需要简单的修改 @aaa/bbb源码，package.json如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;@aaa/bbb&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.0.4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;patch-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^6.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>目前比较流量的有两种方案：</p><ol><li>使用 webpack alias 实现替换文件</li><li>使用 patch-package</li></ol><p>个人感觉用 patch-package 会更优雅一点，今天核心也是介绍这种方法</p><h3 id="patch-package" tabindex="-1">patch-package <a class="header-anchor" href="#patch-package" aria-label="Permalink to &quot;patch-package&quot;">​</a></h3><ol><li>安装</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> patch-package</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>项目的根目录 <code>package.json</code> 下，添加 <code>npm postinstall</code>，以便每次执行 <code>npm install</code> 时能合进所有的 patch 文件</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>  	&quot;postinstall&quot;: &quot;patch-package&quot; </span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>开开心心修改<code>node_modules</code> 目录下依赖库的代码</li><li>执行 <code>npx patch-package &lt;package-name&gt;</code></li></ol><ul><li>如: 修改了taro-ui的 AtIndexs 组件后，执行 <code>npx patch-package taro-ui</code></li><li>执行完后，会在本地生成一个 <code>patches</code> 目录，里面有对应的文件，长这样： <img src="`+i+'" alt="图片1"></li></ul><ol start="5"><li><code>patches</code>这个目录以及里面的文件可以使用 git 跟踪，分享给团队的其他人</li></ol><ul><li>当其他人使用 <code>npm install</code> 安装第三方依赖库时，patch-package 会根据 <code>patches</code>目录下的文件，将你改好的代码同步跟新到 <code>node_modules</code> 目录下修改过的依赖库的代码</li></ul>',15),t=[p];function o(c,d,h,r,u,k){return e(),s("div",null,t)}const b=a(l,[["render",o]]);export{g as __pageData,b as default};
